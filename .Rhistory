theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_label(group = Country.Region)
?geom_label
ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 3.5, color = "orange") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_text(
label=Country.Region,
check_overlap = T
)
ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 3.5, color = "orange") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_text(
label = analysis$Country.Region,
check_overlap = T
)
ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 3.5, color = "orange") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_text(
label = analysis$Country.Region,
nudge_x = 2,
check_overlap = T
)
ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 3.5, color = "orange") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_text(
label = analysis$Country.Region,
nudge_x = 1,
check_overlap = T
)
ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 3.5, color = "orange") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_text(
label = analysis$Country.Region,
nudge_x = 1,
nudge_y = 1,
check_overlap = T
)
library(coronavirus, ggrepel)
ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region, label = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 3.5, color = "orange") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_label_repel()
library(coronavirus, ggrepel)
library(ggrepel)
ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region, label = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 3.5, color = "orange") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_label_repel()
ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region, label = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 3.5, color = "orange") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_label_repel(data = subset(analysis, max_days == days_since))
ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region, label = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = .75, size = 3.5, color = "purple") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_label_repel(data = subset(analysis, max_days == days_since))
ggsave(file = "~/Desktop/corona_all_on_one_plot.png", plot = corona, height = 6, width = 9, dpi = 600)
ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region, label = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = .5, size = 3.5, color = "purple") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_label_repel(data = subset(analysis, max_days == days_since))
corona_2 <- ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region, label = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = .5, size = 3.5, color = "purple") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_label_repel(data = subset(analysis, max_days == days_since))
ggsave(file = "~/Desktop/corona_all_on_one_plot.png", plot = corona_2, height = 6, width = 9, dpi = 600)
devtools::install_github("RamiKrispin/coronavirus")
library(coronavirus)
library(ggrepel)
data("coronavirus")
library(tidyverse)
analysis <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(Country.Region, date) %>%
summarise(total_cases = sum(cases)) %>%
mutate(total_cases_to_date =cumsum(total_cases)) %>%
filter(total_cases_to_date >= 100)
analysis <- analysis %>%
filter(Country.Region != "China") %>%
filter(Country.Region != "Cruise Ship") %>%
group_by(Country.Region) %>%
mutate(threshold_date = min(date)) %>%
mutate(days_since = date - threshold_date) %>%
mutate(max_days = max(days_since)) %>%
filter(max_days >= 10) %>%
arrange(desc(Country.Region))
italy <- analysis %>%
filter(Country.Region == "Italy")
corona <- ggplot(data = subset(analysis, Country.Region != "Italy"), aes(x = days_since, y = total_cases_to_date)) +
annotate(geom='line', x=italy$days_since,y=italy$total_cases_to_date, linetype = "dashed") +
geom_line(alpha = 1, size = 2, color = "black") +
geom_line(alpha = 1, size = 1.5, color = "orange") +
theme_classic() +
facet_wrap(vars(Country.Region)) +
ggtitle("The United States, Western Europe, and Iran are on similar Corona trajectories as Italy (dashed-line)") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases")
ggsave(file = "~/Desktop/corona_compared_to_italy.png", plot = corona, height = 6, width = 9, dpi = 600)
corona_2 <- ggplot(data = analysis, aes(x = days_since, y = total_cases_to_date, group = Country.Region, label = Country.Region)) +
geom_line(data = subset(analysis, Country.Region != "US"), alpha = .33, size = 3.5, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = 1, size = 4, color = "black") +
geom_line(data = subset(analysis, Country.Region == "US"), alpha = .5, size = 3.5, color = "purple") +
theme_classic() +
ggtitle("The United States (in orange) looks more like Europe or Iran than Asia") +
ylab("Total confirmed cases (certainly an undercount)") +
xlab("Days since 100 confirmed cases") +
geom_label_repel(data = subset(analysis, max_days == days_since))
ggsave(file = "~/Desktop/corona_all_on_one_plot.png", plot = corona_2, height = 6, width = 9, dpi = 600)
###################################################################
# Replication code for Wing, Bradford, Carroll, Hollingsworth (2020)
###################################################################
# Clear memory
rm(list=ls())
###################################################################
# Load required packages using package manager (pacman)
# First make sure that pacman is installed
if (!require("pacman")) install.packages("pacman")
# Second, load all the packages that we will use
pacman::p_load(plyr, cowplot, tidyverse, estimatr, tidylog, huxtable,
flextable, ggrepel, mfx, openxlsx)
###################################################################
# Set display options for tidylog
options("tidylog.display" = NULL)
###################################################################
# Import marijuana data
marijuana_data <- read_csv("data/data_for_analysis.csv")
###################################################################
# Recode marijuana policy variables
# Make a variable equal to 2 if non-marijuana, 1 if medical
marijuana_data <- marijuana_data %>%
mutate(mj_policy = ifelse(marijuana_data$mm== 1, 1,2))
# Make the variable equal to 3 if recreational marijuana
marijuana_data$mj_policy <- ifelse(marijuana_data$rm_disp == 1, 3, marijuana_data$mj_policy)
###################################################################
# Calculate group means of EVALI case rate by MJ policy
mean_evali_by_mj_use <- marijuana_data %>%
group_by(mj_policy) %>%
summarise(
mean = mean(cases_per_million),
sd = sd(cases_per_million),
n = n()
)  %>%
mutate(se = sd/sqrt(n),
lower_ci = mean - qt(0.975, n -1)*se,
upper_ci = mean + qt(0.975, n -1)*se)
# Use regression  so we can easily calculate the 95% CI and compare groups using huxreg package
evali_no_mj_mean <- lm_robust(cases_per_million ~ 1, data = subset(marijuana_data, mj_policy == 2), se_type = "stata")
evali_mm_mean <- lm_robust(cases_per_million ~ 1, data = subset(marijuana_data, mj_policy == 1), se_type = "stata")
evali_rm_mean <- lm_robust(cases_per_million ~ 1, data = subset(marijuana_data, mj_policy == 3), se_type = "stata")
# Store results in table
TableOfMeans.EVALI <- huxreg("Prohibition" = evali_no_mj_mean,  "Medical Only" = evali_mm_mean, "Recreational" = evali_rm_mean,
align = "center",
number_format = "%.2f",
error_format = '({conf.low} to {conf.high})',
statistics = c(N = "nobs"),
stars = NULL,
coefs = c("Mean" = "(Intercept)"),
note = "Note: 95% confidence interval calculated using robust standard errors in parentheses." )
# Add title
caption(TableOfMeans.EVALI) <- "Table 1: Mean EVALI case rate per million by marijuana policy"
# Display table
TableOfMeans.EVALI
# Export table to word document
TableOfMeansForWord.EVALI <- as_FlexTable(TableOfMeans.EVALI)
TableOfMeansForWord.EVALI <-  fontsize(TableOfMeansForWord.EVALI, size = 12)
TableOfMeansForWord.EVALI <- width(TableOfMeansForWord.EVALI, width = 1.25)
my_doc <- officer::read_docx()
my_doc <- flextable::body_add_flextable(
my_doc, TableOfMeansForWord.EVALI)
print(my_doc, target =
"output/evali_means.docx")
###################################################################
# Calculate difference between group means of EVALI case rate by MJ policy
# Difference between Rec and Medical
compare_rm_mm <- lm_robust(cases_per_million ~ rm_disp, data = subset(marijuana_data, mm == 1), se_type = "stata")
summary(compare_rm_mm)
compare_rm_prohib <- lm_robust(cases_per_million ~ rm_disp, data = subset(marijuana_data, mm == 0 | rm_disp ==1), se_type = "stata")
summary(compare_rm_prohib)
###################################################################
# Replication code for Wing, Bradford, Carroll, Hollingsworth (2020)
###################################################################
# Clear memory
rm(list=ls())
###################################################################
# Load required packages using package manager (pacman)
# First make sure that pacman is installed
if (!require("pacman")) install.packages("pacman")
# Second, load all the packages that we will use
pacman::p_load(plyr, cowplot, tidyverse, estimatr, tidylog, huxtable,
flextable, ggrepel, mfx, openxlsx)
###################################################################
# Set display options for tidylog
options("tidylog.display" = NULL)
###################################################################
# Import marijuana data
marijuana_data <- read_csv("data/data_for_analysis.csv")
###################################################################
# Recode marijuana policy variables
# Make a variable equal to 2 if non-marijuana, 1 if medical
marijuana_data <- marijuana_data %>%
mutate(mj_policy = ifelse(marijuana_data$mm== 1, 1,2))
# Make the variable equal to 3 if recreational marijuana
marijuana_data$mj_policy <- ifelse(marijuana_data$rm_disp == 1, 3, marijuana_data$mj_policy)
###################################################################
# Calculate group means of EVALI case rate by MJ policy
mean_evali_by_mj_use <- marijuana_data %>%
group_by(mj_policy) %>%
summarise(
mean = mean(cases_per_million),
sd = sd(cases_per_million),
n = n()
)  %>%
mutate(se = sd/sqrt(n),
lower_ci = mean - qt(0.975, n -1)*se,
upper_ci = mean + qt(0.975, n -1)*se)
# Use regression  so we can easily calculate the 95% CI and compare groups using huxreg package
evali_no_mj_mean <- lm_robust(cases_per_million ~ 1, data = subset(marijuana_data, mj_policy == 2), se_type = "stata")
evali_mm_mean <- lm_robust(cases_per_million ~ 1, data = subset(marijuana_data, mj_policy == 1), se_type = "stata")
evali_rm_mean <- lm_robust(cases_per_million ~ 1, data = subset(marijuana_data, mj_policy == 3), se_type = "stata")
# Store results in table
TableOfMeans.EVALI <- huxreg("Prohibition" = evali_no_mj_mean,  "Medical Only" = evali_mm_mean, "Recreational" = evali_rm_mean,
align = "center",
number_format = "%.2f",
error_format = '({conf.low} to {conf.high})',
statistics = c(N = "nobs"),
stars = NULL,
coefs = c("Mean" = "(Intercept)"),
note = "Note: 95% confidence interval calculated using robust standard errors in parentheses." )
# Add title
caption(TableOfMeans.EVALI) <- "Table 1: Mean EVALI case rate per million by marijuana policy"
# Display table
TableOfMeans.EVALI
# Export table to word document
TableOfMeansForWord.EVALI <- as_FlexTable(TableOfMeans.EVALI)
TableOfMeansForWord.EVALI <-  fontsize(TableOfMeansForWord.EVALI, size = 12)
TableOfMeansForWord.EVALI <- width(TableOfMeansForWord.EVALI, width = 1.25)
my_doc <- officer::read_docx()
my_doc <- flextable::body_add_flextable(
my_doc, TableOfMeansForWord.EVALI)
print(my_doc, target =
"output/evali_means.docx")
###################################################################
# Calculate difference between group means of EVALI case rate by MJ policy
# Difference between Rec and Medical
compare_rm_mm <- lm_robust(cases_per_million ~ rm_disp, data = subset(marijuana_data, mm == 1), se_type = "stata")
# Difference between Rec and prohibition
compare_rm_prohib <- lm_robust(cases_per_million ~ rm_disp, data = subset(marijuana_data, mm == 0 | rm_disp ==1), se_type = "stata")
# Difference between medical and prohibition
compare_mm_prohib <- lm_robust(cases_per_million ~ mm, data = subset(marijuana_data, mm == 1 & rm_disp == 0 | mm == 0), se_type = "stata")
TableOfDifferences.EVALI <- huxreg("Medical v\n Prohibition" = compare_mm_prohib,  "Prohibition v\n Recreational" = compare_rm_prohib, "Medical v\n Recreational" = compare_rm_mm,
align = "center",
number_format = "%.3f",
error_format = '({std.error}) \n [{p.value}] \n ({conf.low} to {conf.high})',
statistics = c(N = "nobs"),
coefs = c("Difference" = "mm", "Difference" = "rm_disp"),
note = "Note: Difference between means of groups reported with the robust standard error of the difference reported in parentheses below. P-values reported in brackets. P-values also represented by stars with * p < 0.05, ** p < 0.01, *** p < 0.001. 95% confidence interval of difference in means calculated using robust standard errors in parentheses.")
# Add title
caption(TableOfDifferences.EVALI) <- "Table 2: Difference in mean EVALI case rate per million by marijuana policy"
# Display table
TableOfDifferences.EVALI
# Export table to word document
TableOfDifferencesForWord.EVALI <- as_FlexTable(TableOfDifferences.EVALI)
TableOfDifferencesForWord.EVALI <-  fontsize(TableOfDifferencesForWord.EVALI, size = 12)
TableOfDifferencesForWord.EVALI <- width(TableOfDifferencesForWord.EVALI, width = 1.25)
my_doc <- officer::read_docx()
my_doc <- flextable::body_add_flextable(
my_doc, TableOfDifferencesForWord.EVALI)
print(my_doc, target =
"output/evali_difference_in_means.docx")
##########################################################################################################
# Control for both at the same time (have to put results in a data frame then export as a huxtable since there is no clear way to link mfx for poisson to table)
# Initialize table
common_results_table <- data.frame(matrix(ncol = 1, nrow = 16 ))
names(common_results_table) <- c("OLS", "Poisson (mfx)")
# Using OLS
# compare_all_ols <- lm_robust(cases_per_million ~ I(mm == 1 & rm_disp == 0) +  I(rm_disp == 1) , data = marijuana_data, se_type = "stata")
#
#
# sym <-""
#   if (is.na(compare_all_ols$p.value[1])==FALSE){
#     if (compare_all_ols$p.value[1]<=.05) {
#       sym <- "*"
#     }
#     if (compare_all_ols$p.value[1]<=.01) {
#       sym <- "**"
#     }
#     if (compare_all_ols$p.value[1]<=.001) {
#       sym <- "***"
#     }
#   }
# common_results_table[1,1] <- paste0(round(compare_all_ols$coefficients[1],digits = 2), sym)
# common_results_table[2,1] <- paste0("(",round(compare_all_ols$std.error[1],digits = 2),")")
# common_results_table[3,1] <- paste0("[",round(compare_all_ols$p.value[1],digits = 2),"]")
# common_results_table[4,1] <- paste0("(",round(compare_all_ols$conf.low[1],digits = 2)," to ",round(compare_all_ols$conf.high[1],digits = 2),")")
#
#
# sym <-""
# if (is.na(compare_all_ols$p.value[2])==FALSE){
#   if (compare_all_ols$p.value[2]<=.05) {
#     sym <- "*"
#   }
#   if (compare_all_ols$p.value[2]<=.01) {
#     sym <- "**"
#   }
#   if (compare_all_ols$p.value[2]<=.001) {
#     sym <- "***"
#   }
# }
# common_results_table[6,1] <- paste0(round(compare_all_ols$coefficients[2],digits = 2), sym)
# common_results_table[7,1] <- paste0("(",round(compare_all_ols$std.error[2],digits = 2),")")
# common_results_table[8,1] <- paste0("[",round(compare_all_ols$p.value[2],digits = 2),"]")
# common_results_table[9,1] <- paste0("(",round(compare_all_ols$conf.low[2],digits = 2)," to ",round(compare_all_ols$conf.high[2],digits = 2),")")
#
# sym <-""
# if (is.na(compare_all_ols$p.value[3])==FALSE){
#   if (compare_all_ols$p.value[3]<=.05) {
#     sym <- "*"
#   }
#   if (compare_all_ols$p.value[3]<=.01) {
#     sym <- "**"
#   }
#   if (compare_all_ols$p.value[3]<=.001) {
#     sym <- "***"
#   }
# }
# common_results_table[11,1] <- paste0(round(compare_all_ols$coefficients[3],digits = 2), sym)
# common_results_table[12,1] <- paste0("(",round(compare_all_ols$std.error[3],digits = 2),")")
# common_results_table[13,1] <- paste0("[",round(compare_all_ols$p.value[3],digits = 2),"]")
# common_results_table[14,1] <- paste0("(",round(compare_all_ols$conf.low[3],digits = 2)," to ",round(compare_all_ols$conf.high[3],digits = 3),")")
#
# common_results_table[16,1] <- nrow(marijuana_data)
# Using Poisson count model
compare_all_poisson <-poissonmfx(round(mid_point) ~  I(mm == 1 & rm_disp == 0) + I(rm_disp == 1) + offset(log(pop_total/1000000)), data = marijuana_data)
# Recreational marijuana adoption is associated with -3.05 per million (roughly 40% of mean)
sym <-""
if (is.na(compare_all_poisson$mfxest[1,4])==FALSE){
if (compare_all_poisson$mfxest[1,4]<=.05) {
sym <- "*"
}
if (compare_all_poisson$mfxest[1,4]<=.01) {
sym <- "**"
}
if (compare_all_poisson$mfxest[1,4]<=.001) {
sym <- "***"
}
}
common_results_table[6,1] <- paste0(round(compare_all_poisson$mfxest[1,1],digits = 2), sym)
common_results_table[7,1] <- paste0("(",round(compare_all_poisson$mfxest[1,2],digits = 2),")")
common_results_table[8,1] <- paste0("[",round(compare_all_poisson$mfxest[1,4],digits = 2),"]")
common_results_table[9,1] <- paste0("(",
round(compare_all_poisson$mfxest[1,1] - qt(0.975, compare_all_poisson[["fit"]][["df.residual"]] -1)*compare_all_poisson$mfxest[1,2],digits = 2),
" to ",
round(compare_all_poisson$mfxest[1,1] + qt(0.975, compare_all_poisson[["fit"]][["df.residual"]] -1)*compare_all_poisson$mfxest[1,2],digits = 2),
")")
sym <-""
if (is.na(compare_all_poisson$mfxest[2,4])==FALSE){
if (compare_all_poisson$mfxest[2,4]<=.05) {
sym <- "*"
}
if (compare_all_poisson$mfxest[2,4]<=.01) {
sym <- "**"
}
if (compare_all_poisson$mfxest[2,4]<=.001) {
sym <- "***"
}
}
common_results_table[11,1] <- paste0(round(compare_all_poisson$mfxest[2,1],digits = 2), sym)
common_results_table[12,1] <- paste0("(",round(compare_all_poisson$mfxest[2,2],digits = 2),")")
common_results_table[13,1] <- paste0("[",round(compare_all_poisson$mfxest[2,4],digits = 2),"]")
common_results_table[14,1] <- paste0("(",
round(compare_all_poisson$mfxest[2,1] - qt(0.975, compare_all_poisson[["fit"]][["df.residual"]] -1)*compare_all_poisson$mfxest[2,2],digits = 2),
" to ",
round(compare_all_poisson$mfxest[2,1] + qt(0.975, compare_all_poisson[["fit"]][["df.residual"]] -1)*compare_all_poisson$mfxest[2,2],digits = 2),
")")
common_results_table[16,1] <- nrow(marijuana_data)
hux_common_results_table <- as_hux(common_results_table, add_colnames = TRUE)
hux_common_results_table <- insert_row(hux_common_results_table,
c("(1)"),
after = 0
)
hux_common_results_table <- insert_column(hux_common_results_table,
c("", "",
"Intercept", "",  "",  "",  "",
"Medical marijuana only", "",  "",  "",  "",
"Recreational marijuana", "",  "",  "",  "",
"N"
),
after = 0
)
hux_common_results_table <- hux_common_results_table %>%
set_top_border(1, 1:2, 1)     %>%
set_bottom_border(2, 2, 1)     %>%
set_top_border(18, 2, 1)     %>%
set_bottom_border(18, 1:2, 1)   %>%
set_align(1:18, 2, "center")
# Add title
caption(hux_common_results_table) <- "Table 5: The association between the EVALI case rate per million and marijuana policy while controling for both medical and recreational"
# Display table
hux_common_results_table
wb <- as_Workbook(hux_common_results_table)
openxlsx::saveWorkbook(wb,
"output/evali_common_regression.xlsx",
overwrite = TRUE)
##########################################################################################################
###################################################################
# Calculate group means of e-cigarette use by MJ policy
mean_ecig_by_mj_use <- marijuana_data %>%
group_by(mj_policy) %>%
summarise(
mean = mean(ecigarette_use),
sd = sd(ecigarette_use),
n = n()
)  %>%
mutate(se = sd/sqrt(n),
lower_ci = mean - qt(0.975, n -1)*se,
upper_ci = mean + qt(0.975, n -1)*se)
# Use regression  so we can easily calculate the 95% CI and compare groups using huxreg package
ecig_no_mj_mean <- lm_robust(ecigarette_use ~ 1, data = subset(marijuana_data, mj_policy == 2), se_type = "stata")
ecig_mm_mean <- lm_robust(ecigarette_use ~ 1, data = subset(marijuana_data, mj_policy == 1), se_type = "stata")
ecig_rm_mean <- lm_robust(ecigarette_use ~ 1, data = subset(marijuana_data, mj_policy == 3), se_type = "stata")
# Store results in table
TableOfMeans.ecig <- huxreg("Prohibition" = ecig_no_mj_mean,  "Medical Only" = ecig_mm_mean, "Recreational" = ecig_rm_mean,
align = "center",
number_format = "%.2f",
error_format = '({conf.low} to {conf.high})',
statistics = c(N = "nobs"),
stars = NULL,
coefs = c("Mean" = "(Intercept)"),
note = "Note: 95% confidence interval calculated using robust standard errors in parentheses.")
# Add title
caption(TableOfMeans.ecig) <- "Table 3: Mean e-cigarette use prevalence by marijuana policy"
# Display table
TableOfMeans.ecig
# Export table to word document
TableOfMeansForWord.ecig <- as_FlexTable(TableOfMeans.ecig)
TableOfMeansForWord.ecig <-  fontsize(TableOfMeansForWord.ecig, size = 12)
TableOfMeansForWord.ecig <- width(TableOfMeansForWord.ecig, width = 1.25)
my_doc <- officer::read_docx()
my_doc <- flextable::body_add_flextable(
my_doc, TableOfMeansForWord.ecig)
print(my_doc, target =
"output/ecigarette_use_means.docx")
###################################################################
# Calculate difference between group means of EVALI case rate by MJ policy
# Difference between Rec and Medical
ecig_compare_rm_mm <- lm_robust(ecigarette_use ~ rm_disp, data = subset(marijuana_data, mm == 1), se_type = "stata")
summary(ecig_compare_rm_mm)
ecig_compare_rm_prohib <- lm_robust(ecigarette_use ~ rm_disp, data = subset(marijuana_data, mm == 0 | rm_disp ==1), se_type = "stata")
summary(ecig_compare_rm_prohib)
